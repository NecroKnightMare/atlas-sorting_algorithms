Pseudocode:
In pseudocode, the algorithm may be expressed as:

function CountingSort(input, k)
    
    count ← array of k + 1 zeros
    output ← array of same length as input
    
    for i = 0 to length(input) - 1 do
        j = key(input[i])
        count[j] = count[j] + 1

    for i = 1 to k do
        count[i] = count[i] + count[i - 1]

    for i = length(input) - 1 down to 0 do
        j = key(input[i])
        count[j] = count[j] - 1
        output[count[j]] = input[i]

    return output

From:
https://en.wikipedia.org/wiki/Counting_sort

first attempt:



void print_array(const int *array, size_t size);

void counting_sort(int *array, size_t size)
{
    int max, k;
    int *count, *sorted;
    size_t i, j;

    if (!array || size < 2)
    {
        return;
    }

    max = array[0];

    for (i = 1; i < size; i++)
    {
        if (array[i] > max)
        {
            max = array[i];
        }
    }
    count = calloc(max + 1, sizeof(int));
    if (!count)
    {
        free(count);
        return;
    }

    for (i = 0; i < size; i++)
    {
        count[array[i]]++;
    }

    print_array(count, max + 1);

    for (k = 1; k <= max; k++)
    {
        count[k] += count[k - 1];
    }
    
    sorted = malloc(size * sizeof(int));
    if (!sorted)
    {
        free(count);
        return;
    }
  
    for (j = size; j > 0; j--)
    {
        sorted[count[array[j - 1]] - 1] = array[j - 1];
        count[array[j - 1]]--;
    }
    for (i = 0; i < size; i++)
    {
        array[i] = sorted[i];
    }

    free(sorted);
    free(count);
}